<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:rescomm="clr-namespace:Ai.Hong.Common.Convert;assembly=AHCommonMethod"
                    xmlns:s="clr-namespace:System;assembly=mscorlib">

    <!--内容列表菜单的Style-->
    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
    <Style x:Key="TreeViewArrowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                        <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{DynamicResource treeView_ArrowNormalBackground}" 
                              Stroke="{DynamicResource treeView_ArrowNormalBorderBrush}">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource treeView_ArrowMouseOnBorderBrush}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource treeView_ArrowMouseOnBackground}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource treeView_ArrowSelectedBorderBrush}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource treeView_ArrowSelectedBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TreeViewItem}" x:Key="TreeViewItemTest">
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
        <!--Setter Property="IsExpanded" Value="True"-->
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource treeView_Foreground}"/>
        <Setter Property="Padding" Value="0,3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <ControlTemplate.Resources>
                        <rescomm:IndentConverter Indent="19" MarginLeft="5"  x:Key="indentConverter" />
                    </ControlTemplate.Resources>
                    <StackPanel Height="Auto">
                        <Border x:Name="outBorder" BorderThickness="1" CornerRadius="2" Margin="0">
                            <!--
                                 BorderBrush="{TemplateBinding BorderBrush}" 
                                 BorderThickness="{TemplateBinding BorderThickness}"-->
                            
                            <Border x:Name="itemBorder" Padding="{TemplateBinding Padding}" CornerRadius="0" BorderThickness="0"
                                    Background="{TemplateBinding Background}" >
                                <Grid Margin="{Binding Converter={StaticResource indentConverter},RelativeSource={RelativeSource TemplatedParent}}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="19" />
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <ToggleButton Grid.Column="0" x:Name="ArrowButton" Style="{StaticResource TreeViewArrowButtonStyle}"
                                                  IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" 
                                                  ClickMode="Press" />
                                    <ContentPresenter Grid.Column="1" x:Name="PART_Header" ContentSource="Header" 
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                                </Grid>
                            </Border>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" />
                    </StackPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="ArrowButton" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="False" />
                                <Condition Property="Width" Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="False" />
                                <Condition Property="Height" Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
                        </MultiTrigger>
                        <Trigger Property="IsSelected"  Value="true">
                            <Setter TargetName="itemBorder" Property="Background" Value="{DynamicResource treeView_SelectedBackgroundBrush}"/>
                            <Setter TargetName="outBorder" Property="BorderBrush" Value="{DynamicResource treeView_SelectedOutBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource treeView_SelectedForeground}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="itemBorder" Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemBorder" Property="Background" Value="{DynamicResource treeView_MouseMoveBackgroundBrush}" />
                            <Setter TargetName="outBorder" Property="BorderBrush" Value="{DynamicResource treeView_MouseMoveOutBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource treeView_MouseMoveForeground}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    
    <!--树形菜单的Style-->
    
    <Style x:Key="toolbarTreeArrowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                        <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{DynamicResource toolbarTree_ArrowNormalBackground}" 
                              Stroke="{DynamicResource toolbarTree_ArrowNormalBorderBrush}">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource toolbarTree_ArrowMouseOnBorderBrush}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource toolbarTree_ArrowMouseOnBackground}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource toolbarTree_ArrowSelectedBorderBrush}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource toolbarTree_ArrowSelectedBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TreeViewItem}" x:Key="toobarTreeItem">
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="IsExpanded" Value="True"></Setter>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource toolbarTree_Foreground}"/>
        <Setter Property="IsEnabled" Value="{Binding Path=threeStateCheck,Mode=OneWay}"/>
        <Setter Property="Padding" Value="0,5,10,5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <ControlTemplate.Resources>
                        <rescomm:IndentConverter Indent="19" MarginLeft="5"  x:Key="indentConverter" />
                        <Storyboard x:Key="ExpandAnimation">
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ItemsHost">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.1" Value="{x:Static Visibility.Visible}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimation Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="LayoutTransform.ScaleY" To="1" Duration="0:0:0.4">
                                <DoubleAnimation.EasingFunction>
                                    <CircleEase EasingMode="EaseInOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.5"/>
                        </Storyboard>
                        <Storyboard x:Key="UnExpandAnimation">
                            <DoubleAnimation Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="LayoutTransform.ScaleY" To="0" Duration="0:0:0.3">
                                <DoubleAnimation.EasingFunction>
                                    <CircleEase EasingMode="EaseInOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.4" />
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ItemsHost">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.4" Value="{x:Static Visibility.Visible}"/>
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.5" Value="{x:Static Visibility.Collapsed}"/>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="MouseEnterAnimation">
                            <ColorAnimation Storyboard.TargetName="itemBorder" Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)" From="Transparent" Duration="0:0:0.5"/>
                        </Storyboard>
                        <Storyboard x:Key="MouseLeaveAnimation">
                            <ColorAnimation Storyboard.TargetName="itemBorder" Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)" To="Transparent" Duration="0:0:0.5"/>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <StackPanel Height="Auto">
                        <Border x:Name="outBorder" BorderThickness="1" CornerRadius="2" Margin="0">
                            <!--
                                 BorderBrush="{TemplateBinding BorderBrush}" 
                                 BorderThickness="{TemplateBinding BorderThickness}"-->

                            <Border x:Name="itemBorder" Padding="{TemplateBinding Padding}" CornerRadius="0" BorderThickness="0"
                                    Background="{TemplateBinding Background}" >
                                    <Grid Margin="{Binding Converter={StaticResource indentConverter},RelativeSource={RelativeSource TemplatedParent}}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="19" />
                                            <ColumnDefinition />
                                        </Grid.ColumnDefinitions>
                                        <ToggleButton Grid.Column="0" x:Name="ArrowButton" Style="{StaticResource toolbarTreeArrowButtonStyle}"
                                                      IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" 
                                                      ClickMode="Press" />
                                        <ContentPresenter Grid.Column="1" x:Name="PART_Header" ContentSource="Header" 
                                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                                    </Grid>
                            </Border>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" >
                            <ItemsPresenter.LayoutTransform>
                                <ScaleTransform ScaleY="0" />
                            </ItemsPresenter.LayoutTransform>
                        </ItemsPresenter>
                    </StackPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource ExpandAnimation}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource UnExpandAnimation}"/>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="ArrowButton" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="Gray"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="False" />
                                <Condition Property="Width" Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="False" />
                                <Condition Property="Height" Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="itemBorder" Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemBorder" Property="Background" Value="{DynamicResource toolbarTree_MouseMoveBackgroundBrush}" />
                            <Setter TargetName="outBorder" Property="BorderBrush" Value="{DynamicResource toolbarTree_MouseMoveOutBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource toolbarTree_MouseMoveForeground}"/>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseEnterAnimation}"/>
                            </MultiTrigger.EnterActions>
                            <!--MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseLeaveAnimation}"/>
                            </MultiTrigger.ExitActions-->
                        </MultiTrigger>
                        <Trigger Property="IsSelected"  Value="true">
                            <Setter TargetName="itemBorder" Property="Background" Value="{DynamicResource toolbarTree_SelectedBackgroundBrush}"/>
                            <Setter TargetName="outBorder" Property="BorderBrush" Value="{DynamicResource toolbarTree_SelectedOutBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource toolbarTree_SelectedForeground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--样品字典列表的样式-->
    <Style TargetType="{x:Type ListBoxItem}" x:Key="SampleThemeListBoxItemStyle">
        <Setter Property="Foreground" Value="{DynamicResource treeView_Foreground}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ControlTemplate.Resources>
                        <BooleanToVisibilityConverter x:Key="visConvt"/>
                    </ControlTemplate.Resources>
                    <Border x:Name="outBorder" BorderThickness="1" CornerRadius="2" Margin="0">
                        <Border x:Name="itemBorder" Padding="{TemplateBinding Padding}" CornerRadius="0" BorderThickness="0" 
                                    Background="{TemplateBinding Background}" >
                            <StackPanel>
                                <ContentPresenter TextBlock.FontSize="14"/>
                                <StackPanel Orientation="Horizontal" Margin="10,5,0,0">
                                    <!--允许用户输入-->
                                    <TextBlock Text="{DynamicResource SampleDictPanel_ThemeCanUserInput}" 
                                               Visibility="{Binding canInput, Converter={StaticResource visConvt}}"/>
                                    <!--只支持条码-->
                                    <TextBlock Text="{DynamicResource SampleDictPanel_ThemeBarcodeOnly}"  
                                               Visibility="{Binding useCode, Converter={StaticResource visConvt}}"/>
                                    <!--条码长度 始终显示-->
                                    <TextBlock Text="{DynamicResource SampleDictPanel_ThemeCodeLength}" Margin="10,0,0,0" />
                                    <TextBlock Text="=" Margin="5,0" />
                                    <TextBlock Text="{Binding codeNum,Mode=OneWay}" />
                                </StackPanel>
                            </StackPanel>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected"  Value="true">
                            <Setter TargetName="itemBorder" Property="Background" Value="{DynamicResource treeView_SelectedBackgroundBrush}"/>
                            <Setter TargetName="outBorder" Property="BorderBrush" Value="{DynamicResource treeView_SelectedOutBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource treeView_SelectedForeground}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="itemBorder" Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="itemBorder" Property="Background" Value="{DynamicResource treeView_MouseMoveBackgroundBrush}" />
                            <Setter TargetName="outBorder" Property="BorderBrush" Value="{DynamicResource treeView_MouseMoveOutBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource treeView_MouseMoveForeground}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



</ResourceDictionary>